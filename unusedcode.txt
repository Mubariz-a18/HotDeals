    // request({ url: imageUrl, encoding: null },async function (err, response, data) {
    //     if (err) {
    //         console.log(err);
    //     } else {
    //         const buffer = sharp(data)
    //             .resize({ width: 256, height: 256 })
    //             .toBuffer()
    //         const bucket = storage.bucket(process.env.STORAGEBUCKET);

    //         const file = bucket.file(thumbnailLocation);

    //         const fileStream = file.createWriteStream();

    //         fileStream.end(buffer);

    //         const firebaseUrl = await GetUrlOfImage()

    //     }
    // });


const { getStorage, ref, deleteObject, getDownloadURL } = require("firebase/storage")
    
//       async function GetUrlOfImage(imageFileName) {

//     const storage = getStorage();

//     const pathReference = ref(storage, imageFileName);

//     const imageThumbnailUrl = await getDownloadURL(pathReference)

//     return imageThumbnailUrl
// }


// async function deleteFileFromStorage(image) {
//     const desertRef = ref(storage, `${image}`)
//     deleteObject(desertRef).then(() => {

//     }).catch(e => {
//         console.log(e)
//     })
// }
// // Initialize Firebase
// const app = initializeApp(firebaseConfig);
// const storage = getStorage(app);



// const { initializeApp } = require("firebase/app");
// const { getStorage, ref, deleteObject } = require("firebase/storage")

// // TODO: Add SDKs for Firebase products that you want to use


// const { getStorage, ref, getDownloadURL } = require("firebase/storage");
// const { initializeApp } = require("firebase/app");


// const firebaseConfig = {
//     apiKey: process.env.APIKEY,
//     authDomain: process.env.AUTHDOMAIN,
//     databaseURL: process.env.DATABASEURL,
//     projectId: process.env.PROJECTID,
//     storageBucket: process.env.STORAGEBUCKET,
//     messagingSenderId: process.env.MESSAGINGSENDERID,
//     appId: process.env.APPID,
//     measurementId: process.env.MEASUREMENTID
// };

// const imageThumbnailUrlfunc = async (thumbnailLocation) => {

//     const firebaseApp = initializeApp(firebaseConfig);

//     const firebaseStorage = getStorage(firebaseApp);

//     const pathReference = ref(firebaseStorage, thumbnailLocation);

//     const imageThumbnailUrl = await getDownloadURL(pathReference)

//     return imageThumbnailUrl
// }

// boost_credits_info: [
//   {
//     count: {
//       type: Number,
//     },
//     category: {
//       type: String
//     },
//     sub_category: {
//       type: String
//     },
//     status: {
//       type: String,
//       enum: ['Available', "Expired", "Empty", "Active"],
//       default: "Available"
//     },
//     duration: {
//       type: Number,
//     },
//     allocation: {
//       type: String,
//       enum: ["Admin-atLogin", "Referral", "Admin-Monthly", "Purchased-Boost", "By-Admin"],
//       default: "Admin-atLogin"
//     },
//     transaction_Id: {
//       type: String
//     },
//     referral_Id: {
//       type: String,
//     },
//     allocated_on: {
//       type: String
//     },
//     purchaseDate: {
//       type: String
//     },
//     credits_expires_on: {
//       type: String
//     }
//   }
// ],
// premium_boost_credits_info: [
//   {
//     count: {
//       type: Number,
//     },
//     category: {
//       type: String
//     },
//     sub_category: {
//       type: String
//     },
//     status: {
//       type: String,
//       enum: ['Available', "Expired", "Empty", "Active", "By-Admin"],
//       default: "Available"
//     },
//     duration: {
//       type: Number,
//     },
//     allocation: {
//       type: String,
//       enum: ["Admin-atLogin", "Referral", "Admin-Monthly", "Purchased-premium-Boost"],
//       default: "Admin-atLogin"
//     },
//     transaction_Id: {
//       type: String
//     },
//     referral_Id: {
//       type: String,
//     },
//     allocated_on: {
//       type: String
//     },
//     purchaseDate: {
//       type: String
//     },
//     credits_expires_on: {
//       type: String
//     }
//   }
// ],
// Highlight_credit_info: [
//   {
//     count: {
//       type: Number,
//     },
//     category: {
//       type: String
//     },
//     sub_category: {
//       type: String
//     },
//     status: {
//       type: String,
//       enum: ['Available', "Expired", "Empty", "Active"],
//       default: "Available"
//     },
//     duration: {
//       type: Number,
//     },
//     allocation: {
//       type: String,
//       enum: ["Admin-atLogin", "Referral", "Admin-Monthly", "Purchase_Highlight", "By-Admin"],
//       default: "Admin-atLogin"
//     },
//     transaction_Id: {
//       type: String
//     },
//     referral_Id: {
//       type: String,
//     },
//     allocated_on: {
//       type: String
//     },
//     purchaseDate: {
//       type: String
//     },
//     credits_expires_on: {
//       type: String
//     }
//   }
// ],






// module.exports = { imageThumbnailUrlfunc }



    //   if (Paid_Credit_Container == undefined) {

    //     throw ({ status: 404, message: 'NOT_ENOUGH_CREDITS' });

    //   } else {

    //     Paid_Credit_Container.forEach(PaidCredit => {

    //       if (PaidCredit.category == category && PaidCredit.status == "Available" && PaidCredit.credit_type == credit_type && PaidCredit.count >= count) {

    //         return "READY_TO_POST_THE_AD"

    //       } else {

    //         throw ({ status: 404, message: 'NOT_ENOUGH_CREDITS' });

    //       }
    //     })
    //   }

    // } else {

    //   const Free_Credit_Container = CreditDocument.free_credits_info;

    //   Free_Credit_Container.forEach(FreeCredit => {

    //     if (FreeCredit.status == "Available" && FreeCredit.count >= credvalue) {

    //       return "READY_TO_POST_THE_AD"

    //     } else {

    //       throw ({ status: 404, message: 'NOT_ENOUGH_CREDITS' });

    //     }
    //   })

    // }


    

    // let credvalue = credit_value(category, isPrime)


    // if (CreditDocument.available_free_credits <= credvalue && userDoc.free_credit <= credvalue) {

    //   const Paid_Credit_Container = CreditDocument.paid_credits_info;



      // free_credit: {
  //   type: Number,
  // },
  // general_credit:{
  //   type: Number,
  // },
  // premium_credit: {
  //   type: Number,
  // },
  // general_boost_credit: {
  //   type: Number,
  // },
  // premium_boost_credit: {
  //   type: Number,
  // },
  // highlight_credit: {
  //   type: Number,
  // },

      // if (credit_type == "Premium") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_premium_credits: count },

    //     $push: push

    //   }, {
    //     new: true
    //   }
    //   );

    //   // update the users profile total Premium Credit
    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       premium_credit: count
    //     }
    //   });

    //   return newCredit;

    // } else if (credit_type == "General") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_general_credits: count },
    //     $push: push

    //   }, {
    //     new: true
    //   });

    //   // update the users profile total general_credit
    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       general_credit: count
    //     }
    //   });

    //   return newCredit;
    // }

    // else if (credit_type == "General-Boost") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_general_boost_credits: count },

    //     $push: push

    //   }, {
    //     new: true
    //   });

    //   // update the users profile total general_boost_credit
    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       general_boost_credit: count
    //     }
    //   });

    //   return newCredit;

    // } else if (credit_type == "Premium-Boost") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_premium_boost_credits: count },

    //     $push: push

    //   }, {
    //     new: true
    //   });

    //   // update the users profile total premium_boost_credit

    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       premium_boost_credit: count
    //     }
    //   });

    //   return newCredit;

    // }
    // else if (credit_type == "HighLight") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_highlight_credits: count },

    //     $push: push

    //   }, { new: true });
    //   // update the users profile total highlight_credits
    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       highlight_credit: count
    //     }
    //   });

    //   return newCredit;
    // }


    // only for testing here

    // else if (credit_type == "Free") {

    //   const newCredit = await Credit.findOneAndUpdate({ user_id: userId }, {

    //     $inc: { available_free_credits : count },

    //     $push:{
    //       "free_credits_info":{
    //         "count":500,
    //         "duration":"60",
    //         "status":"Available",
    //         "allocation":"Admin-Monthly",
    //         "allocated_on":currentDate,
    //         credits_expires_on:expiry_date_func(30)
    //       }
    //     }

    //   }, { new: true });
    //   // update the users profile total highlight_credits
    //   await Profile.findOneAndUpdate({ _id: userId }, {
    //     $inc: {
    //       free_credit : count
    //     }
    //   });

    //   return newCredit;
    // }



    

async function updateCredits(params) {
  const credits = await Credit.find()

  credits.forEach(cred=>{

    cred.universal_credit_bundles.forEach(async bundle=>{
      if(!bundle.credit_expiry_date){
        await Credit.updateOne({_id:cred._id,'universal_credit_bundles._id':bundle._id},{
          $set:{
            'universal_credit_bundles.$.credit_expiry_date':"2023-03-14 18:10:01"
            }
        })
      }
    })

  })
}

updateCredits()